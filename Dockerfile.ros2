ARG ROS_DISTRIBUTION=humble
ARG ROS_WS=/ros2_ws
FROM ros:$ROS_DISTRIBUTION-ros-base

# Set environment and working directory
ARG ROS_WS
ENV ROS_WS $ROS_WS
WORKDIR $ROS_WS

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
  build-essential \
  python3-colcon-common-extensions \
  python3-rosdep \
  nlohmann-json3-dev \
  libasio-dev \
  libssl-dev \
  libwebsocketpp-dev \
  && rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Add package.xml so we can install package dependencies.
COPY package.xml src/ros-foxglove-bridge/package.xml

# Install rosdep dependencies
RUN . /opt/ros/$ROS_DISTRO/setup.sh && \
    apt-get update && rosdep install -y \
      --from-paths \
        src \
      --ignore-src \
    && rm -rf /var/lib/apt/lists/*

# Add common files and ROS 2 source code
COPY CMakeLists.txt src/ros-foxglove-bridge/CMakeLists.txt
COPY foxglove_bridge_base src/ros-foxglove-bridge/foxglove_bridge_base
COPY ros2_foxglove_bridge src/ros-foxglove-bridge/ros2_foxglove_bridge

# Use the bash shell so we can use the source command
SHELL [ "/bin/bash" , "-c" ]

# Build the ROS 2 workspace and ensure it's sourced when a container is run
RUN source /opt/ros/$ROS_DISTRO/setup.bash \
  && colcon build --event-handlers console_direct+
RUN echo "source install/setup.bash" >> ~/.bashrc

# Set the working folder at startup
WORKDIR /ros2_ws

# Run foxglove_bridge
CMD ["/bin/bash", "-c", "source install/setup.bash && ros2 run foxglove_bridge foxglove_bridge"]
